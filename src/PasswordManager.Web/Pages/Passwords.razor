@page "/passwords"
@inject PasswordManager.Web.Services.PasswordService PasswordService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Nav
@inject IJSRuntime JS

<h3>Vos Mots de Passe</h3>
<!-- Notification Toast -->
<div class="toast-container position-fixed top-0 end-0 p-3">
    <div class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true" id="notificationToast">
        <div class="d-flex">
            <div class="toast-body">
                @notificationMessage
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" @onclick="HideNotification"></button>
        </div>
    </div>
</div>

@if (passwords == null)
{
    <p>Chargement...</p>
}
else
{

<h3>Filtrer par Cat√©gorie</h3>
<select @bind="SelectedCategory" @bind:event="onchange">
    <option value="">Toutes</option>
    <option value="R√©seaux Sociaux">R√©seaux Sociaux</option>
    <option value="Sport">Sport</option>
    <option value="Finance">Finance</option>
    <option value="Streaming">Streaming</option>
    <option value="Autre">Autre</option>
</select>


<h3>Recherche üîç</h3>
<input @bind="SearchQuery" @bind:event="oninput" placeholder="Rechercher un mot de passe..." />

@if (filteredPasswords.Count == 0 && !string.IsNullOrEmpty(searchQuery))
{
    <p class="text-danger">‚ùå Aucun mot de passe trouv√©.</p>
}
else
{
    <p><strong>üîé R√©sultats trouv√©s :</strong> @filteredPasswords.Count</p>

    <ul>
        @foreach (var password in filteredPasswords)
        {
            <li>
                <strong>@password.Title</strong> - @password.Username (@password.Category)
                <button @onclick="() => StartEditing(password)">‚úè Modifier</button>
                <button @onclick="() => ShowDeleteConfirmation(password.Id)">üóë Supprimer</button>
            </li>
        }
    </ul>
}


}

@if (isEditing)
{
    <h3>Modifier le mot de passe</h3>
    <input @bind="editingPassword.Title" placeholder="Nom du site/service" />
    <input @bind="editingPassword.Username" placeholder="Nom d'utilisateur" />
    <input @bind="editingPassword.EncryptedPassword" type="password" placeholder="Mot de passe" />

    <select @bind="editingPassword.Category">
        <option value="">Choisir une cat√©gorie</option>
        <option value="R√©seaux Sociaux">R√©seaux Sociaux</option>
        <option value="Sport">Sport</option>
        <option value="Finance">Finance</option>
        <option value="Streaming">Streaming</option>
        <option value="Autre">Autre</option>
    </select>

    <button @onclick="UpdatePassword">Sauvegarder</button>
    <button @onclick="CancelEditing">Annuler</button>
}


<h3>Ajouter un mot de passe</h3>
<input @bind="newPassword.Title" placeholder="Nom du site/service" />
<input @bind="newPassword.Username" placeholder="Nom d'utilisateur" />
<input @bind="newPassword.EncryptedPassword" @oninput="AnalyzePasswordStrength" type="password" placeholder="Mot de passe" />

<button @onclick="GeneratePassword">üîÑ G√©n√©rer</button>

<!-- Indicateur de force -->
<div>
    <span>Force du mot de passe :</span>
    <progress value="@passwordStrength" max="100"></progress>
    <span>@passwordStrengthLabel</span>
</div>

<select @bind="newPassword.Category">
    <option value="">Choisir une cat√©gorie</option>
    <option value="R√©seaux Sociaux">R√©seaux Sociaux</option>
    <option value="Sport">Sport</option>
    <option value="Finance">Finance</option>
    <option value="Streaming">Streaming</option>
    <option value="Autre">Autre</option>
</select>

<button @onclick="AddPassword">Ajouter</button>

<h4>Options du mot de passe :</h4>
<label>Longueur :</label>
<input type="number" min="6" max="32" @bind="passwordLength" />

<label><input type="checkbox" @bind="includeNumbers" /> Inclure des chiffres</label>
<label><input type="checkbox" @bind="includeUppercase" /> Inclure des majuscules</label>
<label><input type="checkbox" @bind="includeSpecialChars" /> Inclure des caract√®res sp√©ciaux</label>


<!-- Confirmation Suppression -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmer la suppression</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                √ätes-vous s√ªr de vouloir supprimer ce mot de passe ?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Supprimer</button>
            </div>
        </div>
    </div>
</div>

@code {

    private int passwordToDeleteId;

private async Task ShowDeleteConfirmation(int id)
{
    passwordToDeleteId = id;
    await JS.InvokeVoidAsync("showModal", "confirmDeleteModal");
}

private async Task ConfirmDelete()
{
    var token = await localStorage.GetItemAsync<string>("authToken");
    if (!string.IsNullOrEmpty(token))
    {
        await PasswordService.DeletePassword(passwordToDeleteId, token);

        // üî• Supprimer imm√©diatement de la liste
        passwords.RemoveAll(p => p.Id == passwordToDeleteId);
        filteredPasswords.RemoveAll(p => p.Id == passwordToDeleteId);

        await ShowNotification("Mot de passe supprim√© !");
        await JS.InvokeVoidAsync("hideModal", "confirmDeleteModal"); // Ferme le modal
    }
}
    private List<PasswordManager.Web.Services.PasswordEntry>? passwords;
    private HashSet<int> visiblePasswords = new();
    private PasswordManager.Web.Services.PasswordEntry newPassword = new()
    {
        CreatedAt = DateTime.UtcNow
    };
private string searchQuery = "";



    private List<PasswordManager.Web.Services.PasswordEntry>? filteredPasswords;
    private string selectedCategory = "";

     private int passwordLength = 12; // Longueur par d√©faut
    private bool includeNumbers = true;
    private bool includeUppercase = true;
    private bool includeSpecialChars = true;

    private int passwordStrength = 0;
    private string passwordStrengthLabel = "Faible"; // Libell√© de l'indicateur

    private void GeneratePassword()
    {
        const string lower = "abcdefghijklmnopqrstuvwxyz";
        const string upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        const string numbers = "0123456789";
        const string special = "!@#$%^&*()-_=+<>?";

        string validChars = lower;
        if (includeUppercase) validChars += upper;
        if (includeNumbers) validChars += numbers;
        if (includeSpecialChars) validChars += special;

        Random random = new();
        char[] password = new char[passwordLength];

        for (int i = 0; i < passwordLength; i++)
        {
            password[i] = validChars[random.Next(validChars.Length)];
        }

        newPassword.EncryptedPassword = new string(password);
        AnalyzePasswordStrength(); // V√©rifie la force apr√®s g√©n√©ration
    }

    private void AnalyzePasswordStrength()
    {
        string password = newPassword.EncryptedPassword;
        if (string.IsNullOrEmpty(password))
        {
            passwordStrength = 0;
            passwordStrengthLabel = "Faible";
            return;
        }

        int score = 0;
        if (password.Length >= 8) score += 20;
        if (password.Length >= 12) score += 20;
        if (password.Any(char.IsUpper)) score += 20;
        if (password.Any(char.IsDigit)) score += 20;
        if (password.Any(c => "!@#$%^&*()-_=+<>?".Contains(c))) score += 20;

        passwordStrength = score;

        if (score < 40) passwordStrengthLabel = "Tr√®s faible ‚ùå";
        else if (score < 60) passwordStrengthLabel = "Moyen ‚ö†Ô∏è";
        else if (score < 80) passwordStrengthLabel = "Fort ‚úÖ";
        else passwordStrengthLabel = "Tr√®s Fort üî•";
    }

private string notificationMessage = ""; // Message de la notification

private async Task ShowNotification(string message)
{
    notificationMessage = message;
    await JS.InvokeVoidAsync("showToast"); // Appelle une fonction JS pour afficher le toast
}

private async Task HideNotification()
{
    await JS.InvokeVoidAsync("hideToast"); // Cache la notification
}


private string SearchQuery
{
    get => searchQuery;
    set
    {
        searchQuery = value;
        ApplyFilters();
    }
}

private string SelectedCategory
{
    get => selectedCategory;
    set
    {
        selectedCategory = value;
        ApplyFilters();
    }
}


private void ApplyFilters()
{
    if (passwords == null) return;

    filteredPasswords = passwords
        .Where(p =>
            (string.IsNullOrEmpty(SelectedCategory) || p.Category == SelectedCategory) &&
            (string.IsNullOrEmpty(SearchQuery) ||
             p.Title.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
             p.Username.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)))
        .ToList();

    StateHasChanged(); // üî• Force la mise √† jour de l'interface
}




    private bool isEditing = false;
    private PasswordManager.Web.Services.PasswordEntry editingPassword = new();

protected override async Task OnInitializedAsync()
{
    var token = await localStorage.GetItemAsync<string>("authToken");
    if (string.IsNullOrEmpty(token))
    {
        Nav.NavigateTo("/login");
        return;
    }

    passwords = await PasswordService.GetPasswords(token);
    filteredPasswords = new List<PasswordManager.Web.Services.PasswordEntry>(passwords); 

    ApplyFilters(); // üî• Appliquer le filtre d√®s le chargement
}


private async Task AddPassword()
{
    var token = await localStorage.GetItemAsync<string>("authToken");
    if (!string.IsNullOrEmpty(token))
    {
        newPassword.CreatedAt = DateTime.UtcNow;

        // üî• R√©cup√©rer le mot de passe cr√©√© avec l'ID correct
        var createdPassword = await PasswordService.AddPassword(newPassword, token);

        if (createdPassword != null) // V√©rifie que l'API a bien r√©pondu
        {
            passwords.Add(createdPassword); // üî• Ajoute le bon objet avec l'ID de la base

            // üî• V√©rifie si le filtre actuel correspond
            if (string.IsNullOrEmpty(selectedCategory) || createdPassword.Category == selectedCategory)
            {
                filteredPasswords.Add(createdPassword);
            }
        }
await ShowNotification("Mot de passe ajout√© avec succ√®s !");

        newPassword = new() { CreatedAt = DateTime.UtcNow };
    }
}




  private async Task DeletePassword(int id)
{
    var token = await localStorage.GetItemAsync<string>("authToken");
    if (!string.IsNullOrEmpty(token))
    {
        await PasswordService.DeletePassword(id, token);

        // üî• Supprimer directement de la liste en m√©moire
        passwords.RemoveAll(p => p.Id == id);
        filteredPasswords.RemoveAll(p => p.Id == id);
    }
}

private void StartEditing(PasswordManager.Web.Services.PasswordEntry password)
{
    isEditing = true;
    editingPassword = new PasswordManager.Web.Services.PasswordEntry
    {
        Id = password.Id,
        Title = password.Title,
        Username = password.Username,
        EncryptedPassword = password.EncryptedPassword,
        Category = password.Category, 
        CreatedAt = password.CreatedAt
    };
}


private async Task UpdatePassword()
{
    var token = await localStorage.GetItemAsync<string>("authToken");
    if (!string.IsNullOrEmpty(token))
    {
        await PasswordService.UpdatePassword(editingPassword.Id, editingPassword, token);

        // üî• Mettre √† jour l'entr√©e dans `passwords`
        var existingPassword = passwords.FirstOrDefault(p => p.Id == editingPassword.Id);
        if (existingPassword != null)
        {
            existingPassword.Title = editingPassword.Title;
            existingPassword.Username = editingPassword.Username;
            existingPassword.EncryptedPassword = editingPassword.EncryptedPassword;
            existingPassword.Category = editingPassword.Category;
            existingPassword.CreatedAt = editingPassword.CreatedAt;
        }

        // üî• Mettre √† jour le filtre si n√©cessaire
ApplyFilters();
await ShowNotification("Mot de passe mis √† jour !");

        isEditing = false;
    }
}

    private void CancelEditing()
    {
        isEditing = false;
        editingPassword = new();
    }

       private void TogglePasswordVisibility(int id)
    {
        if (visiblePasswords.Contains(id))
        {
            visiblePasswords.Remove(id);
        }
        else
        {
            visiblePasswords.Add(id);
        }
    }
}
