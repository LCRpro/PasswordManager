@page "/passwords"
@inject PasswordManager.Web.Services.PasswordService PasswordService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Nav
@inject IJSRuntime JS


<h3>Vos Mots de Passe</h3>
@if (isOnline)
{
    <p style="color: green;">‚úÖ Connect√© au serveur.</p>
}
else
{
    <p style="color: red;">‚ùå Mode hors ligne activ√©.</p>
}

<div class="toast-container position-fixed top-0 end-0 p-3">
    <div class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true" id="notificationToast">
        <div class="d-flex">
            <div class="toast-body">
                @notificationMessage
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" @onclick="HideNotification"></button>
        </div>
    </div>
</div>

@if (passwords == null)
{
    <p>Chargement...</p>
}
else
{

<h3>Filtrer par Cat√©gorie</h3>
<select @bind="SelectedCategory" @bind:event="onchange">
    <option value="">Toutes</option>
    <option value="R√©seaux Sociaux">R√©seaux Sociaux</option>
    <option value="Sport">Sport</option>
    <option value="Finance">Finance</option>
    <option value="Streaming">Streaming</option>
    <option value="Autre">Autre</option>
</select>


<h3>Recherche üîç</h3>
<input @bind="SearchQuery" @bind:event="oninput" placeholder="Rechercher un mot de passe..." />

@if (filteredPasswords.Count == 0 && !string.IsNullOrEmpty(searchQuery))
{
    <p class="text-danger">‚ùå Aucun mot de passe trouv√©.</p>
}
else
{
    <p><strong>üîé R√©sultats trouv√©s :</strong> @filteredPasswords.Count</p>

    <ul>
        @foreach (var password in filteredPasswords)
        {
            <li>
                <strong>@password.Title</strong> - @password.Username (@password.Category)
                <button @onclick="() => StartEditing(password)">‚úè Modifier</button>
                <button @onclick="() => ShowDeleteConfirmation(password.Id)">üóë Supprimer</button>
            </li>
        }
    </ul>
}


}

@if (isEditing)
{
    <h3>Modifier le mot de passe</h3>
    <input @bind="editingPassword.Title" placeholder="Nom du site/service" />
    <input @bind="editingPassword.Username" placeholder="Nom d'utilisateur" />
    <input @bind="editingPassword.EncryptedPassword" type="password" placeholder="Mot de passe" />

    <select @bind="editingPassword.Category">
        <option value="">Choisir une cat√©gorie</option>
        <option value="R√©seaux Sociaux">R√©seaux Sociaux</option>
        <option value="Sport">Sport</option>
        <option value="Finance">Finance</option>
        <option value="Streaming">Streaming</option>
        <option value="Autre">Autre</option>
    </select>

    <button @onclick="UpdatePassword">Sauvegarder</button>
    <button @onclick="CancelEditing">Annuler</button>
}


<h3>Ajouter un mot de passe</h3>
<input @bind="newPassword.Title" placeholder="Nom du site/service" />
<input @bind="newPassword.Username" placeholder="Nom d'utilisateur" />
<input @bind="newPassword.EncryptedPassword" @oninput="AnalyzePasswordStrength" type="password" placeholder="Mot de passe" />

<button @onclick="GeneratePassword">üîÑ G√©n√©rer</button>

<!-- Indicateur de force -->
<div>
    <span>Force du mot de passe :</span>
    <progress value="@passwordStrength" max="100"></progress>
    <span>@passwordStrengthLabel</span>
</div>

<select @bind="newPassword.Category">
    <option value="">Choisir une cat√©gorie</option>
    <option value="R√©seaux Sociaux">R√©seaux Sociaux</option>
    <option value="Sport">Sport</option>
    <option value="Finance">Finance</option>
    <option value="Streaming">Streaming</option>
    <option value="Autre">Autre</option>
</select>

<button @onclick="AddPassword">Ajouter</button>

<h4>Options du mot de passe :</h4>
<label>Longueur :</label>
<input type="number" min="6" max="32" @bind="passwordLength" />

<label><input type="checkbox" @bind="includeNumbers" /> Inclure des chiffres</label>
<label><input type="checkbox" @bind="includeUppercase" /> Inclure des majuscules</label>
<label><input type="checkbox" @bind="includeSpecialChars" /> Inclure des caract√®res sp√©ciaux</label>


<!-- Confirmation Suppression -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmer la suppression</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                √ätes-vous s√ªr de vouloir supprimer ce mot de passe ?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Supprimer</button>
            </div>
        </div>
    </div>
</div>

@code {
private bool isOnline = true; 
[JSInvokable]
public async Task SetOnlineStatus(bool status)
{
    isOnline = status;
    StateHasChanged();

    if (isOnline)
    {
        await SyncOfflinePasswords();
    }
}



private async Task CheckOnlineStatus()
{
    isOnline = await JS.InvokeAsync<bool>("isOnline");
    StateHasChanged();
}

private async Task SyncOfflinePasswords()
{
    var token = await localStorage.GetItemAsync<string>("authToken");

    if (!string.IsNullOrEmpty(token) && isOnline)
    {

        if (await localStorage.ContainKeyAsync("deletedPasswords"))
        {
            var deletedPasswords = await localStorage.GetItemAsync<List<int>>("deletedPasswords");

            foreach (var passwordId in deletedPasswords)
            {
                try
                {
                    await PasswordService.DeletePassword(passwordId, token);
                }
                catch (Exception ex)
                {
                }
            }

            await localStorage.RemoveItemAsync("deletedPasswords");
        }

        if (await localStorage.ContainKeyAsync("updatedPasswords"))
        {
            var updatedPasswords = await localStorage.GetItemAsync<List<PasswordManager.Web.Services.PasswordEntry>>("updatedPasswords");

            foreach (var password in updatedPasswords)
            {
                try
                {
                    await PasswordService.UpdatePassword(password.Id, password, token);
                }
                catch (Exception ex)
                {
                }
            }

            await localStorage.RemoveItemAsync("updatedPasswords");
        }

        if (await localStorage.ContainKeyAsync("cachedPasswords"))
        {
            var cachedPasswords = await localStorage.GetItemAsync<List<PasswordManager.Web.Services.PasswordEntry>>("cachedPasswords");

            List<PasswordManager.Web.Services.PasswordEntry> onlinePasswords = await PasswordService.GetPasswords(token);

            foreach (var password in cachedPasswords)
            {
                bool alreadyExists = onlinePasswords.Any(p =>
                    p.Title == password.Title && p.Username == password.Username);

                if (!alreadyExists)
                {
                    try
                    {
                        var createdPassword = await PasswordService.AddPassword(password, token);
                        if (createdPassword != null)
                        {
                            passwords.Add(createdPassword);
                        }
                    }
                    catch (Exception ex)
                    {
                    }
                }
                else
                {
                }
            }

            await localStorage.RemoveItemAsync("cachedPasswords");
        }

        passwords = await PasswordService.GetPasswords(token);
        filteredPasswords = new List<PasswordManager.Web.Services.PasswordEntry>(passwords);
        ApplyFilters();
        StateHasChanged();

    }
}


protected override async Task OnInitializedAsync()
{
    token = await localStorage.GetItemAsync<string>("authToken");

    isOnline = await JS.InvokeAsync<bool>("isOnline");

    await JS.InvokeVoidAsync("addOnlineOfflineListeners", DotNetObjectReference.Create(this));

    if (await localStorage.ContainKeyAsync("cachedPasswords"))
    {
        passwords = await localStorage.GetItemAsync<List<PasswordManager.Web.Services.PasswordEntry>>("cachedPasswords");
        filteredPasswords = new List<PasswordManager.Web.Services.PasswordEntry>(passwords);
    }

    if (!string.IsNullOrEmpty(token) && isOnline)
    {
        try
        {
            var onlinePasswords = await PasswordService.GetPasswords(token);
            passwords = onlinePasswords;
            filteredPasswords = new List<PasswordManager.Web.Services.PasswordEntry>(onlinePasswords);

            await localStorage.SetItemAsync("cachedPasswords", passwords);
        }
        catch (Exception)
        {
        }
    }

    ApplyFilters();
}


    private int passwordToDeleteId;
private string token = "";

private async Task ShowDeleteConfirmation(int id)
{
    passwordToDeleteId = id;
    await JS.InvokeVoidAsync("showModal", "confirmDeleteModal");
}

private async Task ConfirmDelete()
{
    var token = await localStorage.GetItemAsync<string>("authToken");

    if (isOnline && !string.IsNullOrEmpty(token))
    {
        await PasswordService.DeletePassword(passwordToDeleteId, token);
    }
    else
    {
        if (await localStorage.ContainKeyAsync("deletedPasswords"))
        {
            var deletedPasswords = await localStorage.GetItemAsync<List<int>>("deletedPasswords");
            deletedPasswords.Add(passwordToDeleteId);
            await localStorage.SetItemAsync("deletedPasswords", deletedPasswords);
        }
        else
        {
            await localStorage.SetItemAsync("deletedPasswords", new List<int> { passwordToDeleteId });
        }

    }

    passwords.RemoveAll(p => p.Id == passwordToDeleteId);
    filteredPasswords.RemoveAll(p => p.Id == passwordToDeleteId);
    await localStorage.SetItemAsync("cachedPasswords", passwords);

    StateHasChanged();
}

    private List<PasswordManager.Web.Services.PasswordEntry>? passwords;
    private HashSet<int> visiblePasswords = new();
    private PasswordManager.Web.Services.PasswordEntry newPassword = new()
    {
        CreatedAt = DateTime.UtcNow
    };
private string searchQuery = "";



    private List<PasswordManager.Web.Services.PasswordEntry>? filteredPasswords;
    private string selectedCategory = "";

     private int passwordLength = 12; 
    private bool includeNumbers = true;
    private bool includeUppercase = true;
    private bool includeSpecialChars = true;

    private int passwordStrength = 0;
    private string passwordStrengthLabel = "Faible"; 

    private void GeneratePassword()
    {
        const string lower = "abcdefghijklmnopqrstuvwxyz";
        const string upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        const string numbers = "0123456789";
        const string special = "!@#$%^&*()-_=+<>?";

        string validChars = lower;
        if (includeUppercase) validChars += upper;
        if (includeNumbers) validChars += numbers;
        if (includeSpecialChars) validChars += special;

        Random random = new();
        char[] password = new char[passwordLength];

        for (int i = 0; i < passwordLength; i++)
        {
            password[i] = validChars[random.Next(validChars.Length)];
        }

        newPassword.EncryptedPassword = new string(password);
        AnalyzePasswordStrength(); 
    }

    private void AnalyzePasswordStrength()
    {
        string password = newPassword.EncryptedPassword;
        if (string.IsNullOrEmpty(password))
        {
            passwordStrength = 0;
            passwordStrengthLabel = "Faible";
            return;
        }

        int score = 0;
        if (password.Length >= 8) score += 20;
        if (password.Length >= 12) score += 20;
        if (password.Any(char.IsUpper)) score += 20;
        if (password.Any(char.IsDigit)) score += 20;
        if (password.Any(c => "!@#$%^&*()-_=+<>?".Contains(c))) score += 20;

        passwordStrength = score;

        if (score < 40) passwordStrengthLabel = "Tr√®s faible ‚ùå";
        else if (score < 60) passwordStrengthLabel = "Moyen ‚ö†Ô∏è";
        else if (score < 80) passwordStrengthLabel = "Fort ‚úÖ";
        else passwordStrengthLabel = "Tr√®s Fort üî•";
    }

private string notificationMessage = ""; 

private async Task ShowNotification(string message)
{
    notificationMessage = message;
    await JS.InvokeVoidAsync("showToast"); 
}

private async Task HideNotification()
{
    await JS.InvokeVoidAsync("hideToast"); 
}


private string SearchQuery
{
    get => searchQuery;
    set
    {
        searchQuery = value;
        ApplyFilters();
    }
}

private string SelectedCategory
{
    get => selectedCategory;
    set
    {
        selectedCategory = value;
        ApplyFilters();
    }
}


private void ApplyFilters()
{
    if (passwords == null) return;

    filteredPasswords = passwords
        .Where(p =>
            (string.IsNullOrEmpty(SelectedCategory) || p.Category == SelectedCategory) &&
            (string.IsNullOrEmpty(SearchQuery) ||
             p.Title.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
             p.Username.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)))
        .ToList();

    StateHasChanged(); 
}




    private bool isEditing = false;
    private PasswordManager.Web.Services.PasswordEntry editingPassword = new();



private async Task AddPassword()
{
    newPassword.CreatedAt = DateTime.UtcNow;

    if (isOnline)
    {
        var token = await localStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(token))
        {
            var createdPassword = await PasswordService.AddPassword(newPassword, token);
            if (createdPassword != null)
            {
                passwords.Add(createdPassword);
                filteredPasswords.Add(createdPassword);

                await localStorage.SetItemAsync("cachedPasswords", passwords);
            }
        }
    }
  else
{
    passwords.Add(newPassword);
    filteredPasswords.Add(newPassword);

    List<PasswordManager.Web.Services.PasswordEntry> cachedPasswords;
    if (await localStorage.ContainKeyAsync("cachedPasswords"))
    {
        cachedPasswords = await localStorage.GetItemAsync<List<PasswordManager.Web.Services.PasswordEntry>>("cachedPasswords");
    }
    else
    {
        cachedPasswords = new List<PasswordManager.Web.Services.PasswordEntry>();
    }

    cachedPasswords.Add(newPassword);
    await localStorage.SetItemAsync("cachedPasswords", cachedPasswords);

}


    await ShowNotification("Mot de passe ajout√© !");
    newPassword = new() { CreatedAt = DateTime.UtcNow };
}




  private async Task DeletePassword(int id)
{
    var token = await localStorage.GetItemAsync<string>("authToken");
    if (!string.IsNullOrEmpty(token))
    {
        await PasswordService.DeletePassword(id, token);

        passwords.RemoveAll(p => p.Id == id);
        filteredPasswords.RemoveAll(p => p.Id == id);
    }
}

private void StartEditing(PasswordManager.Web.Services.PasswordEntry password)
{
    isEditing = true;
    editingPassword = new PasswordManager.Web.Services.PasswordEntry
    {
        Id = password.Id,
        Title = password.Title,
        Username = password.Username,
        EncryptedPassword = password.EncryptedPassword,
        Category = password.Category, 
        CreatedAt = password.CreatedAt
    };
}


private async Task UpdatePassword()
{
    var token = await localStorage.GetItemAsync<string>("authToken");

    if (isOnline && !string.IsNullOrEmpty(token))
    {
        await PasswordService.UpdatePassword(editingPassword.Id, editingPassword, token);
    }
    else
    {
        if (await localStorage.ContainKeyAsync("updatedPasswords"))
        {
            var updatedPasswords = await localStorage.GetItemAsync<List<PasswordManager.Web.Services.PasswordEntry>>("updatedPasswords");
            updatedPasswords.Add(editingPassword);
            await localStorage.SetItemAsync("updatedPasswords", updatedPasswords);
        }
        else
        {
            await localStorage.SetItemAsync("updatedPasswords", new List<PasswordManager.Web.Services.PasswordEntry> { editingPassword });
        }

    }

    var existingPassword = passwords.FirstOrDefault(p => p.Id == editingPassword.Id);
    if (existingPassword != null)
    {
        existingPassword.Title = editingPassword.Title;
        existingPassword.Username = editingPassword.Username;
        existingPassword.EncryptedPassword = editingPassword.EncryptedPassword;
        existingPassword.Category = editingPassword.Category;
        existingPassword.CreatedAt = editingPassword.CreatedAt;
    }

    await localStorage.SetItemAsync("cachedPasswords", passwords);
    isEditing = false;
    ApplyFilters();
    StateHasChanged();
}


    private void CancelEditing()
    {
        isEditing = false;
        editingPassword = new();
    }

       private void TogglePasswordVisibility(int id)
    {
        if (visiblePasswords.Contains(id))
        {
            visiblePasswords.Remove(id);
        }
        else
        {
            visiblePasswords.Add(id);
        }
    }
}
