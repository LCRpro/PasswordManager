@page "/passwords"
@inject PasswordManager.Web.Services.PasswordService PasswordService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Nav

<h3>Vos Mots de Passe</h3>

@if (passwords == null)
{
    <p>Chargement...</p>
}
else
{
    <ul>
        @foreach (var password in passwords)
        {
            <li>
                <strong>@password.Title</strong> - @password.Username
                <button @onclick="() => StartEditing(password)">‚úè Modifier</button>
                <button @onclick="() => DeletePassword(password.Id)">üóë Supprimer</button>
            </li>
        }
    </ul>
}

@if (isEditing)
{
    <h3>Modifier le mot de passe</h3>
    <input @bind="editingPassword.Title" placeholder="Nom du site/service" />
    <input @bind="editingPassword.Username" placeholder="Nom d'utilisateur" />
    <input @bind="editingPassword.EncryptedPassword" type="password" placeholder="Mot de passe" />
    <input @bind="editingPassword.Category" placeholder="Cat√©gorie" />
    <button @onclick="UpdatePassword">Sauvegarder</button>
    <button @onclick="CancelEditing">Annuler</button>
}

<h3>Ajouter un mot de passe</h3>
<input @bind="newPassword.Title" placeholder="Nom du site/service" />
<input @bind="newPassword.Username" placeholder="Nom d'utilisateur" />
<input @bind="newPassword.EncryptedPassword" type="password" placeholder="Mot de passe" />
<input @bind="newPassword.Category" placeholder="Cat√©gorie" />
<button @onclick="AddPassword">Ajouter</button>

@code {
    private List<PasswordManager.Web.Services.PasswordEntry>? passwords;
    private PasswordManager.Web.Services.PasswordEntry newPassword = new()
    {
        CreatedAt = DateTime.UtcNow
    };

    private bool isEditing = false;
    private PasswordManager.Web.Services.PasswordEntry editingPassword = new();

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsync<string>("authToken");
        if (string.IsNullOrEmpty(token))
        {
            Nav.NavigateTo("/login");
            return;
        }

        passwords = await PasswordService.GetPasswords(token);
    }

    private async Task AddPassword()
    {
        var token = await localStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(token))
        {
            newPassword.CreatedAt = DateTime.UtcNow;
            await PasswordService.AddPassword(newPassword, token);
            passwords = await PasswordService.GetPasswords(token);
            newPassword = new() { CreatedAt = DateTime.UtcNow };
        }
    }

    private async Task DeletePassword(int id)
    {
        var token = await localStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(token))
        {
            await PasswordService.DeletePassword(id, token);
            passwords = await PasswordService.GetPasswords(token);
        }
    }

    private void StartEditing(PasswordManager.Web.Services.PasswordEntry password)
    {
        isEditing = true;
        editingPassword = new PasswordManager.Web.Services.PasswordEntry
        {
            Id = password.Id,
            Title = password.Title,
            Username = password.Username,
            EncryptedPassword = password.EncryptedPassword,
            Category = password.Category,
            CreatedAt = password.CreatedAt
        };
    }

    private async Task UpdatePassword()
    {
        var token = await localStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(token))
        {
            await PasswordService.UpdatePassword(editingPassword.Id, editingPassword, token);
            passwords = await PasswordService.GetPasswords(token);
            isEditing = false;
        }
    }

    private void CancelEditing()
    {
        isEditing = false;
        editingPassword = new();
    }
}
