@page "/passwords"
@inject PasswordManager.Web.Services.PasswordService PasswordService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Nav
@inject IJSRuntime JS
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">

<div class="container mx-auto px-4 py-8">
    <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-2">Gestionnaire de Mots de Passe</h1>
        <p class="text-gray-600">Stockez et g√©rez vos mots de passe en toute s√©curit√©.</p>
        @if (isOnline)
{
    <p style="color: green;">‚úÖ Connect√© au serveur.</p>
}
else
{
    <p style="color: red;">‚ùå Mode hors ligne activ√©.</p>
}
    </div>

<div class="toast-container position-fixed top-0 end-0 p-3">
    <div class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true" id="notificationToast">
        <div class="d-flex">
            <div class="toast-body">
                @notificationMessage
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" @onclick="HideNotification"></button>
        </div>
    </div>
</div>
@if (passwords == null)
{
    <p>Chargement...</p>
}
else
{
    <div class="flex flex-col md:flex-row gap-4 mb-6">
        <div class="relative flex-grow">
            <input type="text" placeholder="Rechercher un mot de passe..."
                class="block w-full pl-4 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-purple-500 focus:border-purple-500"
                @bind="SearchQuery" @bind:event="oninput" />
        </div>

        <div class="relative w-full md:w-64">
            <select class="block w-full pl-4 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-purple-500 focus:border-purple-500"
               @bind="SelectedCategory" @bind:event="onchange">
                <option value="">Toutes les cat√©gories</option>
                <option value="R√©seaux Sociaux">R√©seaux Sociaux</option>
                <option value="Sport">Sport</option>
                <option value="Finance">Finance</option>
                <option value="Streaming">Streaming</option>
                <option value="Autre">Autre</option>
            </select>
        </div>

<button @onclick="ShowModal"
    class="flex items-center justify-center px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 focus:outline-none">
    ‚ûï Ajouter un mot de passe
</button>

@if (showModal)
{
    <div class="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-50">
        <div class="bg-white p-6 rounded-lg shadow-lg w-[600px] relative animate-fade-in">
            
            <button @onclick="CloseModal" class="absolute top-2 right-2 text-gray-600 hover:text-gray-900">
                ‚ùå
            </button>

            <h3 class="text-xl font-bold mb-4 text-center">Ajouter un mot de passe</h3>

            <div class="grid grid-cols-2 gap-4">
                
                <div>
                    <label class="block text-sm font-semibold mb-1">Nom du site/service :</label>
                    <input @bind="newPassword.Title"
                        placeholder="Ex: Gmail, Netflix..."
                        class="w-full px-3 py-2 border border-gray-300 rounded-md mb-3 focus:ring-2 focus:ring-purple-500" />

                    <label class="block text-sm font-semibold mb-1">Nom d'utilisateur :</label>
                    <input @bind="newPassword.Username"
                        placeholder="Votre identifiant"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md mb-3 focus:ring-2 focus:ring-purple-500" />

                    <label class="block text-sm font-semibold mb-1">Cat√©gorie :</label>
                    <select @bind="newPassword.Category"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md mb-3 focus:ring-2 focus:ring-purple-500">
                        <option value="">Choisir une cat√©gorie</option>
                        <option value="R√©seaux Sociaux">R√©seaux Sociaux</option>
                        <option value="Sport">Sport</option>
                        <option value="Finance">Finance</option>
                        <option value="Streaming">Streaming</option>
                        <option value="Autre">Autre</option>
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-semibold mb-1">Mot de passe :</label>
          <div class="relative">
    <input @bind="newPassword.EncryptedPassword" @oninput="AnalyzePasswordStrength"
        type="@(showNewPassword ? "text" : "password")"
        placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
        class="w-full px-3 py-2 border border-gray-300 rounded-md pr-10 focus:ring-2 focus:ring-purple-500" />

    <button @onclick="ToggleNewPasswordVisibility" 
        class="absolute inset-y-0 right-2 flex items-center text-gray-400 hover:text-gray-500">
        @(showNewPassword ? "üëÅÔ∏è" : "üôà")
    </button>
</div>


                    <button @onclick="GeneratePassword"
                        class="w-full bg-gray-200 text-gray-800 py-2 rounded-md mb-3 hover:bg-gray-300">
                        üîÑ G√©n√©rer un mot de passe
                    </button>

                    <div class="mb-3">
                        <span class="text-sm">Force du mot de passe :</span>
                        <progress value="@passwordStrength" max="100" class="w-full"></progress>
                        <span class="text-sm">@passwordStrengthLabel</span>
                    </div>

                    <h4 class="font-semibold mb-2">Options du mot de passe :</h4>
                    <div class="flex flex-wrap gap-2">
                        <label class="flex items-center">
                            <input type="checkbox" @bind="includeNumbers" class="mr-2" /> Chiffres
                        </label>
                        <label class="flex items-center">
                            <input type="checkbox" @bind="includeUppercase" class="mr-2" /> Majuscules
                        </label>
                        <label class="flex items-center">
                            <input type="checkbox" @bind="includeSpecialChars" class="mr-2" /> Caract√®res sp√©ciaux
                        </label>
                    </div>
                </div>
            </div>

            <div class="flex justify-between mt-4">
                <button @onclick="AddPassword"
                    class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700">
                    ‚úÖ Ajouter
                </button>
                <button @onclick="CloseModal"
                    class="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600">
                    ‚ùå Fermer
                </button>
            </div>
        </div>
    </div>
}


    </div>

    <div class="bg-white shadow overflow-hidden rounded-lg">
        <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Nom</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Utilisateur</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Mot de passe</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Cat√©gorie</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
 @if (filteredPasswords.Count == 0 && !string.IsNullOrEmpty(searchQuery))
{
    <tr>
        <td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500">
            Aucun mot de passe trouv√©.
        </td>
    </tr>
}
else
{
 @foreach (var password in filteredPasswords)
{
    <tr>
        @if (isEditing && editingPassword.Id == password.Id)
        {
            <td colspan="5" class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                <div class="flex flex-col gap-2">
                    <input @bind="editingPassword.Title" placeholder="Nom du site/service"
                        class="w-full px-2 py-1 border border-gray-300 rounded-md" />

                    <input @bind="editingPassword.Username" placeholder="Nom d'utilisateur"
                        class="w-full px-2 py-1 border border-gray-300 rounded-md" />

                    <div class="relative">
    <input @bind="editingPassword.EncryptedPassword" 
        type="@(visiblePasswords.Contains(editingPassword.Id) ? "text" : "password")"
        placeholder="Mot de passe"
        class="w-full px-2 py-1 border border-gray-300 rounded-md pr-10" />

    <button @onclick="() => TogglePasswordVisibility(editingPassword.Id)" 
        class="absolute inset-y-0 right-2 flex items-center text-gray-400 hover:text-gray-500">
        @(visiblePasswords.Contains(editingPassword.Id) ? "üëÅÔ∏è" : "üôà")
    </button>
</div>


                    <select @bind="editingPassword.Category"
                        class="w-full px-2 py-1 border border-gray-300 rounded-md">
                        <option value="">Choisir une cat√©gorie</option>
                        <option value="R√©seaux Sociaux">R√©seaux Sociaux</option>
                        <option value="Sport">Sport</option>
                        <option value="Finance">Finance</option>
                        <option value="Streaming">Streaming</option>
                        <option value="Autre">Autre</option>
                    </select>

                    <div class="flex gap-2 mt-2">
                        <button @onclick="UpdatePassword" class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700">
                            üíæ Sauvegarder
                        </button>
                        <button @onclick="CancelEditing" class="px-4 py-2 bg-gray-400 text-white rounded-md hover:bg-gray-500">
                            ‚ùå Annuler
                        </button>
                    </div>
                </div>
            </td>
        }
        else
        {
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@password.Title</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@password.Username</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm">
                <span class="text-gray-500 mr-2">
                    @(visiblePasswords.Contains(password.Id) ? password.EncryptedPassword : "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢")
                </span>
                <button @onclick="() => TogglePasswordVisibility(password.Id)" class="text-gray-400 hover:text-gray-500">
                    @(visiblePasswords.Contains(password.Id) ? "üëÅÔ∏è" : "üôà")
                </button>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
                <span class="px-2 inline-flex text-xs font-semibold rounded-full bg-purple-100 text-purple-800">
                    @password.Category
                </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <button @onclick="() => StartEditing(password)" class="text-blue-600 hover:text-blue-900 mr-2">
                    ‚úè Modifier
                </button>
                <button @onclick="() => DeletePassword(password.Id)" class="text-red-600 hover:text-red-900">
    üóë Supprimer
</button>

            </td>
        }
    </tr>
}

}     
            </tbody>
        </table>
    </div>
}

</div>




@code {

      private bool showModal = false; 

    private void ShowModal()
    {
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }
private bool isOnline = true; 
[JSInvokable]
public async Task SetOnlineStatus(bool status)
{
    isOnline = status;
    StateHasChanged();

    if (isOnline)
    {
        await SyncOfflinePasswords();
    }
}



private async Task CheckOnlineStatus()
{
    isOnline = await JS.InvokeAsync<bool>("isOnline");
    StateHasChanged();
}

private async Task SyncOfflinePasswords()
{
    var token = await localStorage.GetItemAsync<string>("authToken");

    if (!string.IsNullOrEmpty(token) && isOnline)
    {

        if (await localStorage.ContainKeyAsync("deletedPasswords"))
        {
            var deletedPasswords = await localStorage.GetItemAsync<List<int>>("deletedPasswords");

            foreach (var passwordId in deletedPasswords)
            {
                try
                {
                    await PasswordService.DeletePassword(passwordId, token);
                }
                catch (Exception ex)
                {
                }
            }

            await localStorage.RemoveItemAsync("deletedPasswords");
        }

        if (await localStorage.ContainKeyAsync("updatedPasswords"))
        {
            var updatedPasswords = await localStorage.GetItemAsync<List<PasswordManager.Web.Services.PasswordEntry>>("updatedPasswords");

            foreach (var password in updatedPasswords)
            {
                try
                {
                    await PasswordService.UpdatePassword(password.Id, password, token);
                }
                catch (Exception ex)
                {
                }
            }

            await localStorage.RemoveItemAsync("updatedPasswords");
        }

        if (await localStorage.ContainKeyAsync("cachedPasswords"))
        {
            var cachedPasswords = await localStorage.GetItemAsync<List<PasswordManager.Web.Services.PasswordEntry>>("cachedPasswords");

            List<PasswordManager.Web.Services.PasswordEntry> onlinePasswords = await PasswordService.GetPasswords(token);

            foreach (var password in cachedPasswords)
            {
                bool alreadyExists = onlinePasswords.Any(p =>
                    p.Title == password.Title && p.Username == password.Username);

                if (!alreadyExists)
                {
                    try
                    {
                        var createdPassword = await PasswordService.AddPassword(password, token);
                        if (createdPassword != null)
                        {
                            passwords.Add(createdPassword);
                        }
                    }
                    catch (Exception ex)
                    {
                    }
                }
                else
                {
                }
            }

            await localStorage.RemoveItemAsync("cachedPasswords");
        }

        passwords = await PasswordService.GetPasswords(token);
        filteredPasswords = new List<PasswordManager.Web.Services.PasswordEntry>(passwords);
        ApplyFilters();
        StateHasChanged();

    }
}


protected override async Task OnInitializedAsync()
{
    token = await localStorage.GetItemAsync<string>("authToken");

    isOnline = await JS.InvokeAsync<bool>("isOnline");

    await JS.InvokeVoidAsync("addOnlineOfflineListeners", DotNetObjectReference.Create(this));

    if (await localStorage.ContainKeyAsync("cachedPasswords"))
    {
        passwords = await localStorage.GetItemAsync<List<PasswordManager.Web.Services.PasswordEntry>>("cachedPasswords");
        filteredPasswords = new List<PasswordManager.Web.Services.PasswordEntry>(passwords);
    }

    if (!string.IsNullOrEmpty(token) && isOnline)
    {
        try
        {
            var onlinePasswords = await PasswordService.GetPasswords(token);
            passwords = onlinePasswords;
            filteredPasswords = new List<PasswordManager.Web.Services.PasswordEntry>(onlinePasswords);

            await localStorage.SetItemAsync("cachedPasswords", passwords);
        }
        catch (Exception)
        {
        }
    }

    ApplyFilters();
}


    private int passwordToDeleteId;
private string token = "";

private async Task ShowDeleteConfirmation(int id)
{
    passwordToDeleteId = id;
    await JS.InvokeVoidAsync("showModal", "confirmDeleteModal");
}

private async Task ConfirmDelete()
{
    var token = await localStorage.GetItemAsync<string>("authToken");

    if (isOnline && !string.IsNullOrEmpty(token))
    {
        await PasswordService.DeletePassword(passwordToDeleteId, token);
    }
    else
    {
        if (await localStorage.ContainKeyAsync("deletedPasswords"))
        {
            var deletedPasswords = await localStorage.GetItemAsync<List<int>>("deletedPasswords");
            deletedPasswords.Add(passwordToDeleteId);
            await localStorage.SetItemAsync("deletedPasswords", deletedPasswords);
        }
        else
        {
            await localStorage.SetItemAsync("deletedPasswords", new List<int> { passwordToDeleteId });
        }

    }

    passwords.RemoveAll(p => p.Id == passwordToDeleteId);
    filteredPasswords.RemoveAll(p => p.Id == passwordToDeleteId);
    await localStorage.SetItemAsync("cachedPasswords", passwords);

    StateHasChanged();
}

    private List<PasswordManager.Web.Services.PasswordEntry>? passwords;
    private HashSet<int> visiblePasswords = new();
    private PasswordManager.Web.Services.PasswordEntry newPassword = new()
    {
        CreatedAt = DateTime.UtcNow
    };
private string searchQuery = "";



    private List<PasswordManager.Web.Services.PasswordEntry>? filteredPasswords;
    private string selectedCategory = "";

     private int passwordLength = 12; 
    private bool includeNumbers = true;
    private bool includeUppercase = true;
    private bool includeSpecialChars = true;

    private int passwordStrength = 0;
    private string passwordStrengthLabel = "Faible"; 

    private void GeneratePassword()
    {
        const string lower = "abcdefghijklmnopqrstuvwxyz";
        const string upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        const string numbers = "0123456789";
        const string special = "!@#$%^&*()-_=+<>?";

        string validChars = lower;
        if (includeUppercase) validChars += upper;
        if (includeNumbers) validChars += numbers;
        if (includeSpecialChars) validChars += special;

        Random random = new();
        char[] password = new char[passwordLength];

        for (int i = 0; i < passwordLength; i++)
        {
            password[i] = validChars[random.Next(validChars.Length)];
        }

        newPassword.EncryptedPassword = new string(password);
        AnalyzePasswordStrength(); 
    }

    private void AnalyzePasswordStrength()
    {
        string password = newPassword.EncryptedPassword;
        if (string.IsNullOrEmpty(password))
        {
            passwordStrength = 0;
            passwordStrengthLabel = "Faible";
            return;
        }

        int score = 0;
        if (password.Length >= 8) score += 20;
        if (password.Length >= 12) score += 20;
        if (password.Any(char.IsUpper)) score += 20;
        if (password.Any(char.IsDigit)) score += 20;
        if (password.Any(c => "!@#$%^&*()-_=+<>?".Contains(c))) score += 20;

        passwordStrength = score;

        if (score < 40) passwordStrengthLabel = "Tr√®s faible ‚ùå";
        else if (score < 60) passwordStrengthLabel = "Moyen ‚ö†Ô∏è";
        else if (score < 80) passwordStrengthLabel = "Fort ‚úÖ";
        else passwordStrengthLabel = "Tr√®s Fort üî•";
    }

private string notificationMessage = ""; 

private async Task ShowNotification(string message)
{
    notificationMessage = message;
    await JS.InvokeVoidAsync("showToast"); 
}

private async Task HideNotification()
{
    await JS.InvokeVoidAsync("hideToast"); 
}


private string SearchQuery
{
    get => searchQuery;
    set
    {
        searchQuery = value;
        ApplyFilters();
    }
}

private string SelectedCategory
{
    get => selectedCategory;
    set
    {
        selectedCategory = value;
        ApplyFilters();
    }
}


private void ApplyFilters()
{
    if (passwords == null) return;

    filteredPasswords = passwords
        .Where(p =>
            (string.IsNullOrEmpty(SelectedCategory) || p.Category == SelectedCategory) &&
            (string.IsNullOrEmpty(SearchQuery) ||
             p.Title.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
             p.Username.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)))
        .ToList();

    StateHasChanged(); 
}




    private bool isEditing = false;
    private PasswordManager.Web.Services.PasswordEntry editingPassword = new();



private async Task AddPassword()
{
    newPassword.CreatedAt = DateTime.UtcNow;

    if (isOnline)
    {
        var token = await localStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(token))
        {
            var createdPassword = await PasswordService.AddPassword(newPassword, token);
            if (createdPassword != null)
            {
                passwords.Add(createdPassword);
                filteredPasswords.Add(createdPassword);

                await localStorage.SetItemAsync("cachedPasswords", passwords);
            }
        }
    }
  else
{
    passwords.Add(newPassword);
    filteredPasswords.Add(newPassword);

    List<PasswordManager.Web.Services.PasswordEntry> cachedPasswords;
    if (await localStorage.ContainKeyAsync("cachedPasswords"))
    {
        cachedPasswords = await localStorage.GetItemAsync<List<PasswordManager.Web.Services.PasswordEntry>>("cachedPasswords");
    }
    else
    {
        cachedPasswords = new List<PasswordManager.Web.Services.PasswordEntry>();
    }

    cachedPasswords.Add(newPassword);
    await localStorage.SetItemAsync("cachedPasswords", cachedPasswords);

}


    await ShowNotification("Mot de passe ajout√© !");
    newPassword = new() { CreatedAt = DateTime.UtcNow };
}




private async Task DeletePassword(int id)
{

    var token = await localStorage.GetItemAsync<string>("authToken");

    if (!string.IsNullOrEmpty(token))
    {
        await PasswordService.DeletePassword(id, token);
    }
    else
    {

        if (await localStorage.ContainKeyAsync("deletedPasswords"))
        {
            var deletedPasswords = await localStorage.GetItemAsync<List<int>>("deletedPasswords");
            deletedPasswords.Add(id);
            await localStorage.SetItemAsync("deletedPasswords", deletedPasswords);
        }
        else
        {
            await localStorage.SetItemAsync("deletedPasswords", new List<int> { id });
        }
    }

    passwords.RemoveAll(p => p.Id == id);
    filteredPasswords.RemoveAll(p => p.Id == id);
    await localStorage.SetItemAsync("cachedPasswords", passwords);

    StateHasChanged();
}


private void StartEditing(PasswordManager.Web.Services.PasswordEntry password)
{
    isEditing = true;
    editingPassword = new PasswordManager.Web.Services.PasswordEntry
    {
        Id = password.Id,
        Title = password.Title,
        Username = password.Username,
        EncryptedPassword = password.EncryptedPassword,
        Category = password.Category, 
        CreatedAt = password.CreatedAt
    };
}


private async Task UpdatePassword()
{
    var token = await localStorage.GetItemAsync<string>("authToken");

    if (isOnline && !string.IsNullOrEmpty(token))
    {
        await PasswordService.UpdatePassword(editingPassword.Id, editingPassword, token);
    }
    else
    {
        if (await localStorage.ContainKeyAsync("updatedPasswords"))
        {
            var updatedPasswords = await localStorage.GetItemAsync<List<PasswordManager.Web.Services.PasswordEntry>>("updatedPasswords");
            updatedPasswords.Add(editingPassword);
            await localStorage.SetItemAsync("updatedPasswords", updatedPasswords);
        }
        else
        {
            await localStorage.SetItemAsync("updatedPasswords", new List<PasswordManager.Web.Services.PasswordEntry> { editingPassword });
        }

    }

    var existingPassword = passwords.FirstOrDefault(p => p.Id == editingPassword.Id);
    if (existingPassword != null)
    {
        existingPassword.Title = editingPassword.Title;
        existingPassword.Username = editingPassword.Username;
        existingPassword.EncryptedPassword = editingPassword.EncryptedPassword;
        existingPassword.Category = editingPassword.Category;
        existingPassword.CreatedAt = editingPassword.CreatedAt;
    }

    await localStorage.SetItemAsync("cachedPasswords", passwords);
    isEditing = false;
    ApplyFilters();
    StateHasChanged();
}


    private void CancelEditing()
    {
        isEditing = false;
        editingPassword = new();
    }

       private void TogglePasswordVisibility(int id)
    {
        if (visiblePasswords.Contains(id))
        {
            visiblePasswords.Remove(id);
        }
        else
        {
            visiblePasswords.Add(id);
        }
    }

private bool showNewPassword = false; 

private void ToggleNewPasswordVisibility()
{
    showNewPassword = !showNewPassword;
}


}
