@inherits LayoutComponentBase
@inject NavigationManager Nav
@inject Blazored.LocalStorage.ILocalStorageService localStorage


    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="javascript:void(0)">PasswordManager</a>

            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                   
                
                </ul>

                <ul class="navbar-nav">
                    @if (isLoggedIn)
                    {
                        <li class="nav-item">
                            <button class="btn btn-outline-danger" @onclick="Logout">🚪 Déconnexion</button>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item">
                            <a class="nav-link" href="/login">🔑 Connexion</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/register">📝 Inscription</a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </nav>

    <main>
        <div class="container">
            @Body
        </div>
    </main>

@code {
    private bool isLoggedIn = false;

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsync<string>("authToken");
        isLoggedIn = !string.IsNullOrEmpty(token);
        StateHasChanged(); 
    }

    private async Task Logout()
    {
        await localStorage.RemoveItemAsync("authToken"); 
        isLoggedIn = false;
        Nav.NavigateTo("/login", forceLoad: true); 
    }
}
